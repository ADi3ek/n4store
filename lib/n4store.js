// Generated by CoffeeScript 1.4.0
(function() {
  var N4Store, async, exec, fs, path, request;

  request = require('request');

  async = require('async');

  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  exports.createClient = function(endPoint, prefixes, debug) {
    console.log('create client');
    return new N4Store(endPoint, prefixes, debug);
  };

  N4Store = (function() {

    N4Store.prototype.prefixes = {
      'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
      'dc': 'http://purl.org/dc/terms/',
      'dc11': 'http://purl.org/dc/elements/1.1/',
      'skos': 'http://www.w3.org/2004/02/skos/core#',
      'geonames': 'http://www.geonames.org/ontology#',
      'wgs84_pos': 'http://www.w3.org/2003/01/geo/wgs84_pos#',
      'dbpedia-owl': 'http://dbpedia.org/ontology/',
      'foaf': 'http://xmlns.com/foaf/0.1/',
      'owl': 'http://www.w3.org/2002/07/owl#',
      'schema': 'http://schema.org/'
    };

    function N4Store(endPoint, prefixes, debug) {
      var prefix, uri;
      if (prefixes == null) {
        prefixes = {};
      }
      this.debug = debug != null ? debug : false;
      this.sparqlUri = "" + endPoint + "/sparql/";
      this.updateUri = "" + endPoint + "/update/";
      this.dataUri = "" + endPoint + "/data/";
      for (prefix in prefixes) {
        uri = prefixes[prefix];
        this.setPrefix[prefix] = uri;
      }
      this.setPrefixesStr();
    }

    N4Store.prototype.log = function(str) {
      if (this.debug) {
        return console.log(str);
      }
    };

    N4Store.prototype.time = function(str) {
      if (this.debug) {
        return console.time(str);
      }
    };

    N4Store.prototype.timeEnd = function(str) {
      if (this.debug) {
        return console.timeEnd(str);
      }
    };

    N4Store.prototype.setPrefix = function(prefix, uri) {
      this.prefixes[prefix] = uri;
      return this.setPrefixesStr();
    };

    N4Store.prototype.setPrefixesStr = function() {
      var k, v, _ref, _results;
      this.prefixesStr = '';
      _ref = this.prefixes;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(this.prefixesStr += "PREFIX " + k + ": <" + v + "> \n");
      }
      return _results;
    };

    N4Store.prototype.encodeQuery = function(query) {
      return encodeURIComponent("" + this.prefixesStr + "\n " + query);
    };

    N4Store.prototype.get = function(query, callback) {
      var _this = this;
      this.log(query);
      this.time('sparql query took: ');
      return request.get({
        uri: "" + this.sparqlUri + "?query=" + (this.encodeQuery(query)) + "&soft-limit=0",
        headers: {
          "Accept": "application/sparql-results+json"
        }
      }, function(err, res, body) {
        if (err) {
          _this.log(err);
        }
        _this.timeEnd('sparql query took: ');
        return callback(err, body ? JSON.parse(body) : null);
      });
    };

    N4Store.prototype.post = function(query, callback) {
      var _this = this;
      this.log(query);
      this.time("post took: ");
      return request.post({
        uri: this.updateUri,
        body: "update=" + (this.encodeQuery(query)),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }, function(err, res, body) {
        if (err) {
          _this.log(err);
        }
        _this.timeEnd("post took: ");
        return callback(err, body);
      });
    };

    N4Store.prototype.construct = function(query, callback) {
      var uri,
        _this = this;
      uri = "" + this.sparqlUri + "?query=" + (this.encodeQuery(query));
      this.log(query);
      this.time('construct query took:');
      return exec("rapper -i rdfxml -o turtle " + uri, function(err, data) {
        if (err) {
          _this.log(err);
        }
        _this.timeEnd('construct query took:');
        return callback(err, data);
      });
    };

    N4Store.prototype.ask = function(query, callback) {
      var _this = this;
      return this.get(query, function(err, sparql) {
        if (err) {
          _this.log(err);
        }
        return callback(err, sparql.boolean);
      });
    };

    N4Store.prototype["delete"] = function(graph, callback) {
      var _this = this;
      this.time("deleting graph " + graph + " took: ");
      return request.del({
        uri: this.dataUri + graph
      }, function(err, res, body) {
        if (err) {
          _this.log(err);
        }
        _this.timeEnd("deleting graph " + graph + " took: ");
        return callback(err, body);
      });
    };

    N4Store.prototype.put = function(data, graph, callback, format) {
      var _this = this;
      if (format == null) {
        format = "application/x-turtle";
      }
      this.time("put in " + graph + " took: ");
      return request.put({
        uri: this.dataUri + graph,
        body: data,
        headers: {
          'Content-Type': format ? format : 'application/rdf+xml'
        }
      }, function(err, res, body) {
        if (err) {
          _this.log(err);
        }
        _this.timeEnd("put in " + graph + " took: ");
        return callback(err, body);
      });
    };

    N4Store.prototype.putFile = function(file, graph, callback, format) {
      var _this = this;
      return fs.readFile(file, function(err, data) {
        if (err) {
          _this.log(err);
        }
        graph = graph != null ? graph : "urn:" + (path.basename(file));
        return _this.put(data, graph, callback, format);
      });
    };

    N4Store.prototype.putFiles = function(files, graph, callback, format) {
      var _this = this;
      return async.forEachSeries(files, function(file, callback) {
        graph = graph != null ? graph : "urn:" + (path.basename(file));
        return _this.putFile(file, graph, callback, graph = null);
      }, function(err) {
        return callback(err);
      });
    };

    N4Store.prototype.postData = function(data, graph, callback, format) {
      var _this = this;
      if (format == null) {
        format = "turtle";
      }
      this.time("post data in graph " + graph + " took: ");
      return request.post({
        uri: this.dataUri,
        body: "graph=" + (encodeURIComponent(graph)) + "&data=" + (encodeURIComponent(data)) + (format ? "&mime-type=" + format : ""),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }, function(err, res, body) {
        if (err) {
          _this.log(err);
        }
        _this.timeEnd("post data in graph " + graph + " took: ");
        return callback(err, body);
      });
    };

    N4Store.prototype.postFile = function(file, graph, callback, format) {
      var _this = this;
      return fs.readFile(file, function(err, data) {
        if (err) {
          _this.log(err);
          return callback(err);
        } else {
          graph = graph != null ? graph : "urn:" + (path.basename(file));
          return _this.postData(data, graph, callback, format);
        }
      });
    };

    N4Store.prototype.postFiles = function(files, graph, callback, format) {
      var _this = this;
      return async.forEachSeries(files, function(file, callback) {
        graph = graph != null ? graph : "urn:" + (path.basename(file));
        return _this.postFile(file, graph, callback, format);
      }, function(err) {
        if (err) {
          _this.log(err);
        }
        return callback(err);
      });
    };

    N4Store.prototype._getValues = function(query, property, callback) {
      return this.get(query, function(err, sparql) {
        var result, uris;
        uris = (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref1 = sparql != null ? (_ref = sparql.results) != null ? _ref.bindings : void 0 : void 0;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            result = _ref1[_i];
            _results.push(result[property].value);
          }
          return _results;
        })();
        return callback(err, uris);
      });
    };

    N4Store.prototype.getGraphs = function(callback) {
      return this._getValues("SELECT DISTINCT ?g \nWHERE { \n  GRAPH ?g { \n    ?s ?p ?o \n  } \n} ", 'g', callback);
    };

    N4Store.prototype.getTypes = function(callback) {
      return this._getValues("SELECT DISTINCT ?type \nWHERE { \n  ?s rdf:type ?type \n}", 'type', callback);
    };

    return N4Store;

  })();

}).call(this);
